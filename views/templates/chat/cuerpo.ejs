<ul class="chat w3-card-2" data-ng-controller="chatController">

  <li class="header">

    <h3><%= __("chat.onlineContacts") %> <i class="material-icons toggle-expand expandir ">&#xE5CE;</i>     <i data-ng-if="unseenMsgs() > 0" class="material-icons msg-badge scale-fade-in">&#xE0E1;</i></h3>
  </li>

  <li class="user " data-ng-repeat="(k,user) in users" data-ng-click="chatWith(user)">
    <span class="username">{{user.username}}</span>
    <span class="unread" data-ng-if="getUnreadMsgs(user) > 0" data-ng-bind="getUnreadMsgs(user)">
    </span>
  </li>
  <li class="empty user "  data-ng-if="!users || isEmpty(users)">
    <%= __("chat.sinUsuarios")%>
  </li>
</ul>

<div class="conversacion chat w3-card-2 slide-top" data-ng-if="chat">
  <header class="header">
    <h3>{{chat.user.username}} <span data-ng-click="backToContacts()" class="back"><i class="material-icons">&#xE317;</i></span></h3>

  </header>
  <ul >
    <li class="scale-fade"   data-ng-class="msg.from == '<%= user.id %>' ? 'me' : 'destinatary'" data-ng-repeat="msg in chat.messages">

      <p class="msg">
        <span class="time">
          <span class="username" data-ng-if="msg.from == '<%= user.id %>'">Yo</span>
          <span class="username" data-ng-if="msg.from != '<%= user.id %>'" data-ng-bind="users[msg.from].username"></span>
          -
          <span class="date" data-ng-bind="getTimeFormated(msg.time)"></span>
          <i data-ng-if="msg.seen" class="material-icons seen" title="Visto {{msg.seen}}">&#xE417;</i></span>

        <span data-ng-bind-html="msg.text"></span>
      </p>
    </li>

  </ul>

  <footer class="write-box">
    <div  class="text" contenteditable data-placeholder ="<%= __("chat.writePlaceholder") %>">

    </div>
    <span class="controls">
      <span data-ng-click="sendMsg(chat.user)" class="enviar"><i class="material-icons">&#xE163;</i></span>
    </span>
  </footer>
</div>



<script>

  app.controller('chatController', function($rootScope,$http) {
    $rootScope.users={};
    $rootScope.chats ={};
$rootScope.unseenMsgs=function () {
  var unseenMsg= 0;
  for (var k in $rootScope.chats)
  {
    unseenMsg+=$rootScope.getUnreadMsgs({id:k});
  }
  return unseenMsg;

}
    $rootScope.getTimeFormated=function (time) {
      var date = new Date(time*1000);

      return date.toLocaleString();

    }
    $rootScope.getUnreadMsgs=function (user) {

      if($rootScope.chats[user.id])
      {
        return  $rootScope.chats[user.id].messages.filter(function (el) {
          return (!el.seen || el.seen == false);
        }).length;
      }
      return 0;

    }
    $rootScope.backToContacts=function () {

      $rootScope.chat=null;

    }

    $rootScope.chatWith=function (user) {

      if(!$rootScope.chats[user.id] )
      {
        $rootScope.chats[user.id]={messages:[],user:user};
      }
      $rootScope.chat = $rootScope.chats[user.id];

      goToChatBottom();
      //clavo el visto
      $rootScope.markAsSeen($rootScope.chat);

    }

    $rootScope.markAsSeen=function (msgs) {

      var seen=[];

      for(var k in msgs)
      {
        if(!msgs[k].seen && msgs[k].from != '<%= user.id %>')
        {
          seen.push(msgs[k].id);
          msgs[k].seen=true;
        }

      }

      if(seen.length > 0)
      {
        io.socket.post('/mark/seen', { seen:seen ,to:msgs.user.id}, function (resData, jwRes) {

          console.log(jwRes.statusCode);


        });
      }


    }
    $rootScope.sendMsg=function(user){
      var txt =$(".conversacion [contenteditable]").html();
      io.socket.post('/send/msg', { text:txt,to:user.id }, function (resData, jwRes) {

        console.log(jwRes.statusCode);


      });

    };
$rootScope.isEmpty=function (obj) {

  return empty(obj);
}

    // e.g. in the browser...
    io.socket.on('user', function (event){

      console.log(event);
      if(event.data.type)
      {
        switch (event.data.type) {
          case "online-users":


            $.each(event.data.users,function (k,v) {

              if(k != '<%= user.id%>')
              {

                $rootScope.users[v.user.id]= v.user;
              }

            });



            break;

          case "status":


            if(event.data.status == true)
            {
              $rootScope.users[event.data.user.id] = event.data.user;

            }
            else
            {      delete $rootScope.users[event.data.user.id] ;

            }

            break;

          case "msg":
            if(!$rootScope.chats[event.data.from] )
            {
              $rootScope.chats[event.data.from]={messages:[],user:$rootScope.users[event.data.from]};
            }

            var user=event.data.from;
            if(user == '<%= user.id %>')
            {
              user = event.data.to;
            }
            $rootScope.chats[user].messages.push(event.data);


            goToChatBottom();



            break;
          case "seen":


            for (var k in event.data.seen)
            {

             var idx= $rootScope.chats[event.data.from].messages.findIndex(
                function (el) {

                  return el.id == k;

                }
              );
              if(idx > -1)
              {
                $rootScope.chats[event.data.from].messages[idx].seen = event.data.time;
              }
            }




                break;
        }



        $rootScope.$apply();
      }


// => see below
    });

  });

  function goToChatBottom() {
    setTimeout(function () {

      $('.conversacion ul').scrollTop($('.conversacion ul')[0].scrollHeight);
    })
  }


  /*
  $(document).on("click",".conversacion .back",function () {
    $(".conversacion").fadeOut();
  });*/
  $(document).on("click",".chat:not(.conversacion) .header",function () {

    $(".chat .user").slideToggle(function () {

      if($(".chat .user").is(":visible"))
      {
        $(".chat").addClass("expanded");
      }
      else
      {
        $(".chat").removeClass("expanded");
      }

    });

  });
</script>
